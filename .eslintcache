[{"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\index.js":"1","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\App.js":"2","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\reportWebVitals.js":"3","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\ToDoList.js":"4","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\NotFound.js":"5","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Posts.js":"6","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\ToDo.js":"7","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Endpoint.js":"8","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Post.js":"9","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\EnableProfanityFilter.js":"10","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Pagination.js":"11","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\PageHeader.js":"12","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\SnackBar.js":"13"},{"size":578,"mtime":1610041204905,"results":"14","hashOfConfig":"15"},{"size":1854,"mtime":1610217413163,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":24484,"mtime":1610217413164,"results":"18","hashOfConfig":"15"},{"size":353,"mtime":1610217413164,"results":"19","hashOfConfig":"15"},{"size":1802,"mtime":1610127069972,"results":"20","hashOfConfig":"15"},{"size":1811,"mtime":1610217413164,"results":"21","hashOfConfig":"15"},{"size":2114,"mtime":1610122100563,"results":"22","hashOfConfig":"15"},{"size":1429,"mtime":1610213880581,"results":"23","hashOfConfig":"15"},{"size":1900,"mtime":1610122100563,"results":"24","hashOfConfig":"15"},{"size":1440,"mtime":1610137401972,"results":"25","hashOfConfig":"15"},{"size":32296,"mtime":1610217413163,"results":"26","hashOfConfig":"15"},{"size":1715,"mtime":1610133402061,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ibfota",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":4,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\index.js",[],["61","62"],"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\App.js",[],"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\reportWebVitals.js",[],"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\ToDoList.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"import React, { Component } from 'react';\r\nimport { Textfield, Button, Spinner, Card, CardText, CardTitle, CardActions, CardMenu, IconButton  } from 'react-mdl';\r\nimport { CSSPlugin, TweenMax, Elastic } from \"gsap\";\r\nimport { BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport ToDo from \"./ToDo\";\r\nimport Post from \"./Post\";\r\nimport Pagination from \"./Pagination\";\r\nimport Endpoint from \"./Endpoint\";\r\nimport EnableProfanityFilter from \"./EnableProfanityFilter\";\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.height = this.props.global_height;\r\n    this.state = {\r\n      todos: this.props.posts,\r\n      inputValue: this.props.inputValue,\r\n      contentValue: this.props.contentValue,\r\n      movementMatrix: [],\r\n      reorderClicked: false,\r\n      slug: \"\",\r\n      redirect: false,\r\n      postCount: this.props.postCount,\r\n      postCountPrev: this.props.postCountPrev,\r\n      addToDo: false,\r\n      pages: this.props.pages,\r\n      page: this.props.page,\r\n      enableProfanityFilter: this.props.global_enableProfanityFilter\r\n    };\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"ToDoList: constructor(): this.props: \", this.props);\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps,prevState) {\r\n    if (this.state.reorderClicked) {\r\n      this.state.movementMatrix.map((child, index) => {\r\n      const domNode = document.getElementById(\"callout-\" + child[\"index\"]);\r\n      // START CREDITS\r\n      // Author: Joshua Comeau\r\n      // Link: https://medium.com/developers-writing/animating-the-unanimatable-1346a5aab3cd\r\n      /* \r\n          \r\n        Notes: \r\n        \r\n        This is where the magic happens that allows us to reorder a list based on its array index. \r\n        Ingenious solution, using requestAnimationFrame(). \r\n        This type of animation cannot be achieved by using 'react-spring' or CSSTransition\r\n        \r\n      */\r\n      if (domNode) {\r\n        requestAnimationFrame(() => {\r\n          domNode.style.transform = `translateY(${child.top}px)`;\r\n          domNode.style.transition = \"transform 0s\";\r\n          requestAnimationFrame(() => {\r\n            domNode.style.transform = \"\";\r\n            domNode.style.transition =\r\n            \"transform 500ms cubic-bezier(0.68, -0.55, 0.265, 1.55)\";\r\n            this.setState({\r\n            reorderClicked: false\r\n            });\r\n          });\r\n        });\r\n      }\r\n      // END CREDITS\r\n      });\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    window.componentHandler.upgradeDom();\r\n    window.componentHandler.upgradeAllRegistered();\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"ToDoList: componentDidMount()...\");\r\n    }\r\n    setTimeout(function(){\r\n      if(this.props.postCount !== this.props.postCountPrev){\r\n        this.animatePostCountIcon();\r\n      }\r\n    }.bind(this),0);\r\n  }\r\n  animatePostCountIcon() {\r\n    const overshoot = 5;\r\n    const period = 0.25;\r\n    const postCountIcon = document.getElementById(\"post-count-icon\");\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"ToDoList: animatePostCountIcon(): postCountIcon: \",postCountIcon);\r\n    }\r\n    if(postCountIcon){\r\n      TweenMax.to(postCountIcon,0.5,{\r\n      scale:0.25,\r\n      onComplete:function(){\r\n            TweenMax.to(postCountIcon,1.4,{\r\n            scale:1,\r\n            /* ease:Elastic.easeOut,\r\n            easeParams:[overshoot,period] */\r\n            //Elastic.easeOut.config(overshoot,period)\r\n            ease:Elastic.easeOut.config(overshoot,period)\r\n          })\r\n        }\r\n      });\r\n    }\r\n  }\r\n  createMovementMatrix(allMoveUp, allMoveDown, index1, index2, direction) {\r\n    const y = this.height;\r\n    let todos = this.state.todos;\r\n    /* \r\n        \r\n      Notes:\r\n    \r\n      There are 3 possible movement scenarios:\r\n    \r\n      1) All move up: all items move up, except the first item which moves all the way to the down\r\n    \r\n      2) All move down: all items move down, except the last item which moves all the way to the up\r\n    \r\n      3) Two items swap: all items remain static except for the current index and the list item it will swap with\r\n    \r\n      Objective:\r\n    \r\n      Record the following properties of each list item:\r\n    \r\n      1) current index\r\n      2) index to move to\r\n      3) y movement\r\n    \r\n    */\r\n    let movementMatrix = [];\r\n    if (allMoveUp) {\r\n      todos = this.state.todos;\r\n      let obj = {};\r\n      movementMatrix = [];\r\n      const temp = todos.map(\r\n      function (todo, index) {\r\n        obj = {};\r\n        obj[\"index\"] = index;\r\n        obj[\"indexNew\"] = index - 1;\r\n        obj[\"top\"] = -y;\r\n        movementMatrix.push(obj);\r\n      }.bind(this)\r\n      );\r\n      obj = {};\r\n      obj[\"index\"] = 0;\r\n      obj[\"indexNew\"] = todos.length - 1;\r\n      obj[\"top\"] = (todos.length - 1) * y;\r\n      movementMatrix[0] = obj;\r\n    }\r\n    if (allMoveDown) {\r\n      todos = this.state.todos;\r\n      let obj = {};\r\n      movementMatrix = [];\r\n      const temp = todos.map(\r\n      function (todo, index) {\r\n        obj = {};\r\n        obj[\"index\"] = index;\r\n        obj[\"indexNew\"] = index + 1;\r\n        obj[\"top\"] = y;\r\n        movementMatrix.push(obj);\r\n      }.bind(this)\r\n      );\r\n      obj = {};\r\n      obj[\"index\"] = todos.length - 1;\r\n      obj[\"indexNew\"] = 0;\r\n      const _y = (todos.length - 1) * y;\r\n      obj[\"top\"] = -_y;\r\n      movementMatrix[todos.length - 1] = obj;\r\n    }\r\n    if (!allMoveUp && !allMoveDown) {\r\n      todos = this.state.todos;\r\n      let obj = {};\r\n      movementMatrix = [];\r\n      const temp = todos.map(\r\n      function (todo, index) {\r\n        obj = {};\r\n        obj[\"index\"] = index;\r\n        obj[\"indexNew\"] = index;\r\n        obj[\"top\"] = 0;\r\n        movementMatrix.push(obj);\r\n      }.bind(this)\r\n      );\r\n      obj = {};\r\n      obj[\"index\"] = index1;\r\n      obj[\"indexNew\"] = direction === \"up\" ? index1 - 1 : index1 + 1;\r\n      obj[\"top\"] = direction === \"up\" ? -y : y;\r\n      movementMatrix[index1] = obj;\r\n      obj = {};\r\n      obj[\"index\"] = index2;\r\n      obj[\"indexNew\"] = direction === \"up\" ? index2 - 1 : index2 + 1;\r\n      obj[\"top\"] = direction === \"up\" ? y : -y;\r\n      movementMatrix[index2] = obj;\r\n    }\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"ToDoList: movementMatrix(): \", movementMatrix);\r\n    }\r\n    this.setState({\r\n      movementMatrix: movementMatrix\r\n    });\r\n  }\r\n  reorder(allMoveUp, allMoveDown, index1, index2, direction) {\r\n    const y = this.height;\r\n    let todos = this.state.todos;\r\n    /* \r\n        \r\n      Notes:\r\n    \r\n      There are 3 possible movement scenarios:\r\n    \r\n      1) All move up: all items move up, except the first item which moves all the way to the down\r\n    \r\n      2) All move down: all items move down, except the last item which moves all the way to the up\r\n    \r\n      3) Two items swap: all items remain static except for the current index and the list item it will swap with\r\n    \r\n      Objective:\r\n    \r\n      Reorder items by manipulating the todo array\r\n    \r\n    */\r\n    if (allMoveUp) {\r\n      todos = this.state.todos;\r\n      const firstItem = todos[0];\r\n      todos.push(firstItem);\r\n      todos.shift();\r\n    }\r\n    if (allMoveDown) {\r\n      todos = this.state.todos;\r\n      const lastItem = todos[todos.length - 1];\r\n      todos.unshift(lastItem);\r\n      todos.pop();\r\n    }\r\n    if (!allMoveUp && !allMoveDown) {\r\n      todos = this.state.todos;\r\n      const item1 = todos[index1];\r\n      const item2 = todos[index2];\r\n      todos[index1] = item2;\r\n      todos[index2] = item1;\r\n    }\r\n    // Now lets update the 'todo' array\r\n    this.setState({\r\n      todos: this.state.todos\r\n    });\r\n  }\r\n  move(index, direction) {\r\n    this.setState({\r\n      reorderClicked: true\r\n    });\r\n    const maxDistanceDown = this.state.todos.length * 55;\r\n    const maxDistanceUp = -maxDistanceDown;\r\n    const todosLength = this.state.todos.length - 1;\r\n    // index1: current index of item to move\r\n    let index1 = index;\r\n    // index_1: index to move to of item to move\r\n    let index_1 = index;\r\n    // direction1: direction of item to move\r\n    const direction1 = direction;\r\n    let allMoveDown = false;\r\n    let allMoveUp = false;\r\n    // top1: y movement of item to move\r\n    let top1 = 0;\r\n    // direction2: direction of item to be swapped\r\n    let direction2 = direction1 === \"up\" ? \"down\" : \"up\";\r\n    if (direction1 === \"up\") {\r\n      top1 = index1 > 0 ? -this.height : maxDistanceDown;\r\n      direction2 = index1 > 0 ? \"down\" : \"up\";\r\n      index_1 = index1 > 0 ? index1 - 1 : this.state.todos.length - 1;\r\n    } \r\n    else {\r\n      top1 = index1 < this.state.todos.length - 1 ? this.height : maxDistanceUp;\r\n      direction2 = index1 < this.state.todos.length - 1 ? \"up\" : \"down\";\r\n      index_1 = index1 < this.state.todos.length - 1 ? index1 + 1 : 0;\r\n    }\r\n    // index2: current index of item to be swapped\r\n    let index2 = 0;\r\n    // index_2: index to move to of item to be swapped\r\n    let index_2 = 0;\r\n    // top1: y movement of item to be swapped\r\n    let top2 = 0;\r\n    if (direction1 === \"up\") {\r\n      index2 = index1 === 0 ? this.state.todos.length - 1 : index1 - 1;\r\n      top2 = index1 === 0 ? -this.height : this.height;\r\n      index_2 = index1 === 0 ? this.state.todos.length - 2 : index1;\r\n      allMoveUp = index1 === 0 ? true : false;\r\n    } \r\n    else {\r\n      index2 = index1 === this.state.todos.length - 1 ? 0 : index1 + 1;\r\n      top2 = index1 === this.state.todos.length - 1 ? this.height : -this.height;\r\n      index_2 = index1 === this.state.todos.length - 1 ? 1 : index1;\r\n      allMoveDown = index1 === this.state.todos.length - 1 ? true : false;\r\n    }\r\n    this.createMovementMatrix(\r\n      allMoveUp,\r\n      allMoveDown,\r\n      index1,\r\n      index2,\r\n      direction\r\n    );\r\n    this.reorder(allMoveUp, allMoveDown, index1, index2, direction);\r\n  }\r\n  render() {\r\n    if(this.props.global_consoleDebug){\r\n      console.log('ToDoList: render(): this.props.postCount:', this.props.postCount,' this.props.postCountPrev: ',this.props.postCountPrev);\r\n    }\r\n    var todocontainerStyle = {\r\n      height: this.state.todos.length * this.height + \"px\"\r\n    };\r\n    if(this.props.global_consoleDebug){\r\n      console.log('ToDoList: render(): this.state.pages:', this.state.pages,' this.props.inputValue: ',this.props.inputValue,' this.props.contentValue: ',this.props.contentValue);\r\n    }\r\n    let pages = []; \r\n    for (var i = 1; i <= this.state.pages; i++) {\r\n      pages.push(i);\r\n    }\r\n    let pagination = pages.map(\r\n      function (page, index) {\r\n        return (\r\n          <Pagination \r\n            ordinal={page} \r\n            readPost={this.props.readPost.bind(this,page,this.props.origin,\"\",this.props.sortmethod,this.props.sortby,this.props.postbatch,\"\")} \r\n            page={this.props.page} \r\n            pages={this.props.pages} \r\n            maxpostpage={this.props.maxpostpage} \r\n            global_height={this.props.global_height} \r\n            global_consoleDebug={this.props.global_consoleDebug} \r\n            global_enableProfanityFilter={this.props.global_enableProfanityFilter} \r\n            global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} \r\n            global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} \r\n            key={index}\r\n          />\r\n        );\r\n      }.bind(this)\r\n    );\r\n    let prev = pages.map(\r\n      function (page, index) {\r\n        const defaultStyle = this.props.page === 1 ? {cursor: \"default\", color: \"rgba(0,0,0,0.05)\"} : {cursor: \"pointer\", color: \"rgba(0,0,0,0.5)\"};\r\n        let opts = {};\r\n        if(this.props.page !== 1) {\r\n          opts['onClick'] = this.props.readPost.bind(this,parseInt(this.props.page - 1),this.props.origin,\"\",this.props.sortmethod,this.props.sortby,this.props.postbatch,\"\");\r\n        }\r\n        return (\r\n          page === 1 ? \r\n          (\r\n          <i className=\"fa fa-caret-left\" style={defaultStyle} {...opts}></i>\r\n          )\r\n          :\r\n          (\r\n          \"\"\r\n          )\r\n        );\r\n      }.bind(this)\r\n    );\r\n    let next = pages.map(\r\n      function (page, index) {\r\n        const defaultStyle = this.props.page === this.props.pages ? {cursor: \"default\", color: \"rgba(0,0,0,0.05)\"} : {cursor: \"pointer\", color: \"rgba(0,0,0,0.5)\"};\r\n        let opts = {};\r\n        if(this.props.page !== this.props.pages) {\r\n          opts['onClick'] = this.props.readPost.bind(this,parseInt(this.props.page + 1),this.props.origin,\"\",this.props.sortmethod,this.props.sortby,this.props.postbatch,\"\");\r\n        }\r\n        return (\r\n          page === this.props.maxpostpage ? \r\n          (\r\n          <i className=\"fa fa-caret-right\" style={defaultStyle} {...opts}></i>\r\n          )\r\n          :\r\n          (\r\n          \"\"\r\n          )\r\n        );\r\n      }.bind(this)\r\n    );\r\n    pagination = (<div className=\"pagination-container\">{prev}{pagination}{next}</div>);\r\n    if(this.props.global_consoleDebug){\r\n      console.log('ToDoList: render(): this.props.sortmethod: ', this.props.sortmethod,' this.props.sortby: ',this.props.sortby,' this.props.page: ',this.props.page,' this.props.postbatch: ',this.props.postbatch,' this.props.request_postbatch: ',this.props.request_postbatch,' this.props.postbatch_select: ',this.props.postbatch_select);\r\n    }\r\n    let titleSortmethodUpOptsClassName = {};\r\n    titleSortmethodUpOptsClassName['className'] = \"fa fa-arrow-circle-up\";\r\n    if(this.props.sortmethod === \"Title\" && this.props.sortby === \"ASC\") {\r\n      titleSortmethodUpOptsClassName['className'] = \"fa fa-arrow-circle-up current\";\r\n    }\r\n    let titleSortmethodUpOpts = {};\r\n    titleSortmethodUpOpts['onClick'] = this.props.readPost.bind(this,this.props.page,this.props.origin,\"\",\"Title\",\"ASC\",this.props.postbatch,\"\");\r\n    const titleSortmethodUp = (<i {...titleSortmethodUpOptsClassName} {...titleSortmethodUpOpts}></i>);\r\n    let titleSortmethodDownOptsClassName = {};\r\n    titleSortmethodDownOptsClassName['className'] = \"fa fa-arrow-circle-down\";\r\n    if(this.props.sortmethod === \"Title\" && this.props.sortby === \"DESC\") {\r\n      titleSortmethodDownOptsClassName['className'] = \"fa fa-arrow-circle-down current\";\r\n    }\r\n    let titleSortmethodDownOpts = {};\r\n    titleSortmethodDownOpts['onClick'] = this.props.readPost.bind(this,this.props.page,this.props.origin,\"\",\"Title\",\"DESC\",this.props.postbatch,\"\");\r\n    const titleSortmethodDown = (<i {...titleSortmethodDownOptsClassName} {...titleSortmethodDownOpts}></i>);\r\n    const titleColumnTitle = (<div className=\"column-title\"><span>Title</span>{titleSortmethodUp}{titleSortmethodDown}</div>);\r\n    let submissiondateSortmethodUpOptsClassName = {};\r\n    submissiondateSortmethodUpOptsClassName['className'] = \"fa fa-arrow-circle-up\";\r\n    if(this.props.sortmethod === \"Submission_date\" && this.props.sortby === \"ASC\") {\r\n      submissiondateSortmethodUpOptsClassName['className'] = \"fa fa-arrow-circle-up current\";\r\n    }\r\n    let submissiondateSortmethodUpOpts = {};\r\n    submissiondateSortmethodUpOpts['onClick'] = this.props.readPost.bind(this,this.props.page,this.props.origin,\"\",\"Submission_date\",\"ASC\",this.props.postbatch,\"\");\r\n    const submissiondateSortmethodUp = (<i {...submissiondateSortmethodUpOptsClassName} {...submissiondateSortmethodUpOpts}></i>);\r\n    let submissiondateSortmethodDownOptsClassName = {};\r\n    submissiondateSortmethodDownOptsClassName['className'] = \"fa fa-arrow-circle-down\";\r\n    if(this.props.sortmethod === \"Submission_date\" && this.props.sortby === \"DESC\") {\r\n      submissiondateSortmethodDownOptsClassName['className'] = \"fa fa-arrow-circle-down current\";\r\n    }\r\n    let submissiondateSortmethodDownOpts = {};\r\n    submissiondateSortmethodDownOpts['onClick'] = this.props.readPost.bind(this,this.props.page,this.props.origin,\"\",\"Submission_date\",\"DESC\",this.props.postbatch,\"\");\r\n    const submissiondateSortmethodDown = (<i {...submissiondateSortmethodDownOptsClassName} {...submissiondateSortmethodDownOpts}></i>);\r\n    const submissiondateColumnTitle = (<div className=\"column-title\"><span>Created At</span>{submissiondateSortmethodUp}{submissiondateSortmethodDown}</div>);\r\n    let resetSortmethodSortbyOptsClassName = {};\r\n    resetSortmethodSortbyOptsClassName['className'] = \"fa fa-power-off\";\r\n    let resetSortmethodSortbyOpts = {};\r\n    resetSortmethodSortbyOpts['onClick'] = this.props.readPost.bind(this,1,this.props.origin,\"\",\"Submission_date\",\"DESC\",4,\"\");\r\n    const resetSortmethodSortby = (<i {...resetSortmethodSortbyOptsClassName} {...resetSortmethodSortbyOpts}></i>);\r\n    const resetSortmethodSortbyColumnTitle = (<div className=\"column-title\">{resetSortmethodSortby}</div>);\r\n    let postbatch_select = this.props.postbatch_select.map(\r\n      function (records, index) {\r\n      return (\r\n        <option value={records}>{records}</option>\r\n      );\r\n      }.bind(this)\r\n    );\r\n    postbatch_select = (<div className=\"post-batch-select-column-title\"><select className=\"custom\" onChange={this.props.handleSelectChange.bind(this,this.props.page,this.props.origin,\"\",this.props.sortmethod,this.props.sortby)} value={this.props.postbatch}>{postbatch_select}</select></div>);\r\n    const openProfanitylistModal = this.state.enableProfanityFilter === 1 ? (<i className=\"fa fa-file-o\" onClick={this.props.openModal.bind(this,\"Profanity List\",\"The profanity list contains highly offensive words. This list is for testing purposes only.\",\"View Profanity List\",1)}></i>) : (\"\") ;\r\n    // loop through list item array and initiate <ToDo /> child components\r\n    let todos = null;\r\n    if(this.props.origin === \"posts\"){\r\n      todos = this.state.todos.map(\r\n        function (todo, index) {\r\n          return (\r\n          <ToDo \r\n            key={index} \r\n            keyRef={index} \r\n            ref={index} \r\n            title={todo.title} \r\n            content={todo.content} \r\n            done={todo.done} \r\n            slug={todo.slug} \r\n            createdAt={todo.createdAt} \r\n            postid={todo.postid}\r\n            removeTodo={this.props.removeTodo.bind(this,index,\"posts\",todo.postid)}\r\n            markTodoDone={this.props.markTodoDone.bind(this,index)}\r\n            moveUp={this.move.bind(this,index,\"up\")}\r\n            moveDown={this.move.bind(this,index,\"down\")} \r\n            global_height={this.props.global_height} \r\n            global_consoleDebug={this.props.global_consoleDebug} \r\n            global_enableProfanityFilter={this.props.global_enableProfanityFilter} \r\n            global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} \r\n            global_restapiEndpointSecure={this.props.global_restapiEndpointSecure}\r\n          />\r\n          );\r\n        }.bind(this)\r\n      );\r\n    }\r\n    else{\r\n      todos = this.state.todos.map(\r\n        function (todo, index) {\r\n          return (\r\n          <Post \r\n            key={index} \r\n            keyRef={index} \r\n            ref={index} \r\n            title={todo.title} \r\n            done={todo.done} \r\n            slug={todo.slug} \r\n            createdAt={todo.createdAt} \r\n            content={todo.content} \r\n            id1={this.props.id} \r\n            id2={todo.id} \r\n            postid={todo.postid}\r\n            removeTodo={this.props.removeTodo.bind(this,index,\"post\",todo.postid)} \r\n            global_height={this.props.global_height} \r\n            global_consoleDebug={this.props.global_consoleDebug} \r\n            global_enableProfanityFilter={this.props.global_enableProfanityFilter} \r\n            global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} \r\n            global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} \r\n            openModal={this.props.openModal} \r\n          />\r\n          );\r\n        }.bind(this)\r\n      );\r\n    }\r\n    if(!todos){\r\n      todos = (<div className=\"spinner-container\"><div className=\"spinner-container-inner\"><Spinner singleColor /></div></div>)\r\n    }\r\n    const mdltextfieldStyle = {\r\n      marginBottom: \"0px\"\r\n    };\r\n    const clearbothStyle = {\r\n      clear: \"both\"\r\n    };\r\n    let optsClassName1 = {};\r\n    optsClassName1['className'] = \"demo-card-wide\";\r\n    let optsClassName2 = {};\r\n    optsClassName2['className'] = \"posts\";\r\n    let optsClassName3 = {};\r\n    optsClassName3['className'] = \"enableprofanityfilter\";\r\n    let optsClassName4 = {};\r\n    optsClassName4['className'] = \"columns\";\r\n    return (\r\n      this.state.redirect === false ? (\r\n      this.props.origin === \"posts\" ? \r\n      (\r\n      <Card shadow={0} {...optsClassName1}>\r\n        <CardTitle {...optsClassName2}>\r\n          <h2 className=\"mdl-card__title-text\">Posts<span><i id=\"post-count-icon\" className=\"fa fa-files-o\"></i>{this.state.postCount}</span></h2>\r\n        </CardTitle>\r\n        <CardText>\r\n          Please choose between the following endpoints:\r\n          <Endpoint toggleEndpoints={this.props.toggleEndpoints} restapiEndpointType={this.props.restapiEndpointType} global_height={this.props.global_height} global_consoleDebug={this.props.global_consoleDebug} global_enableProfanityFilter={this.props.global_enableProfanityFilter} global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} />\r\n        </CardText>\r\n        <CardActions border {...optsClassName3}>\r\n          Please choose whether to enable the profanity filter:\r\n          <EnableProfanityFilter toggleEnableprofanityfilter={this.props.toggleEnableprofanityfilter} enableprofanityfilter={this.props.enableprofanityfilter} global_height={this.props.global_height} global_consoleDebug={this.props.global_consoleDebug} global_enableProfanityFilter={this.props.global_enableProfanityFilter} global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} />\r\n          {openProfanitylistModal}\r\n        </CardActions>\r\n        <CardActions border {...optsClassName4}>\r\n          <div className=\"column-title-container\">\r\n            <div className=\"column-title-container-inner\">\r\n              {titleColumnTitle}\r\n              {submissiondateColumnTitle}\r\n              {resetSortmethodSortbyColumnTitle}\r\n              {postbatch_select}\r\n            </div>\r\n          </div>\r\n        </CardActions>\r\n        <CardActions border>\r\n          <div className=\"todo-container\" style={todocontainerStyle}>\r\n            {todos}\r\n          </div>\r\n          {pagination}\r\n          <form>\r\n            <div className=\"mdl-textfield mdl-js-textfield\" style={mdltextfieldStyle}>\r\n              <Textfield \r\n              value={this.props.inputValue} \r\n              onChange={this.props.handleChange.bind(this)} \r\n              placeholder=\"Post title\" \r\n              label=\"\" \r\n              />\r\n            </div>\r\n            <div className=\"mdl-textfield mdl-js-textfield\">\r\n              <Textfield \r\n              value={this.props.contentValue} \r\n              onChange={this.props.handleContentChange.bind(this)} \r\n              placeholder=\"Post content\" \r\n              label=\"\" \r\n              rows=\"6\" \r\n              />\r\n            </div>\r\n            <a className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\" onClick={this.props.addTodo.bind(this)}>\r\n              Add Post\r\n            </a>\r\n          </form>\r\n          <div id=\"restapi-container\" className=\"restapi-container\">\r\n            <div id=\"restapi-container-legend\" className=\"restapi-container-legend\">\r\n              Message from Server\r\n            </div>\r\n            <div id=\"restapi-container-text\" className=\"restapi-container-text\">\r\n              <div id=\"restapi-container-text-subtitle\" className=\"restapi-container-text-subtitle\">\r\n                <i id=\"restapi-container-text-subtitle-icon\" className=\"fa fa-check-circle information\"></i>\r\n                <span id=\"restapi-container-text-subtitle-span\">No errors detected</span>\r\n              </div>\r\n              <div id=\"restapi-container-text-inner\" className=\"restapi-container-text-inner\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={clearbothStyle}></div>\r\n        </CardActions>\r\n        <CardMenu style={{color: '#fff'}}>\r\n          <IconButton name=\"share\" onClick={this.props.openModal.bind(this,\"Share\",\"Click below to share\",\"\",2)} />\r\n        </CardMenu>\r\n      </Card>\r\n      )\r\n      :\r\n      (\r\n      <div>\r\n        {todos}\r\n      </div>\r\n      )\r\n      )\r\n      :\r\n      (<Redirect to=\"/\" />)\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\NotFound.js",["82","83","84","85","86","87"],"import React, { Component } from 'react';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  Link,\r\n  NavLink,\r\n} from \"react-router-dom\";\r\n\r\nclass NotFound extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    window.componentHandler.upgradeDom();\r\n  }\r\n  render() {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n}\r\n\r\nexport default NotFound;","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Posts.js",[],"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\ToDo.js",["88"],"import React, { Component } from 'react';\r\nimport { Checkbox } from 'react-mdl';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n} from \"react-router-dom\";\r\n\r\nclass ToDo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.height = this.props.global_height;\r\n    this.state = {\r\n      top: this.height\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    window.componentHandler.upgradeDom();\r\n  }\r\n  render() {\r\n    let defaultClass = \"callout display-enter-active\";\r\n    defaultClass += this.props.done ? \" callout-success\" : \" callout-info\";\r\n    const id1 = \"callout-\" + this.props.keyRef;\r\n    const id2 = \"checkbox-\" + this.props.keyRef;\r\n    const defaultStyle = {\r\n      top: this.props.keyRef * this.state.top + \"px\"\r\n    };\r\n    const link = \"/post/\" + this.props.slug;\r\n    return (\r\n      <div className={defaultClass} style={defaultStyle} id={id1}>\r\n        <i\r\n          className=\"fa fa-arrow-circle-o-up\"\r\n          onClick={this.props.moveUp}\r\n        ></i>\r\n        <i\r\n          className=\"fa fa-arrow-circle-o-down\"\r\n          onClick={this.props.moveDown}\r\n        ></i>\r\n        <Link to={{\r\n          pathname: link,\r\n          state: {\r\n          id: this.props.keyRef,\r\n          slug: this.props.slug,\r\n          title: this.props.title,\r\n          content: this.props.content,\r\n          done: true,\r\n          createdAt: this.props.createdAt,\r\n          postid: this.props.postid\r\n          }\r\n        }}>\r\n          <i className=\"fa fa-link\"></i>\r\n        </Link>\r\n        <Checkbox \r\n        id={id2} \r\n        label={this.props.title} \r\n        onChange={this.props.removeTodo} \r\n        ripple \r\n        checked\r\n         />\r\n        <div className=\"createdat-container\">{this.props.createdAt}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDo;","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Endpoint.js",["89"],"import React, { Component } from 'react';\r\nimport { RadioGroup, Radio } from 'react-mdl';\r\n\r\nclass Endpoint extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if(this.props.global_consoleDebug){\r\n      console.log('Endpoint: constructor(): this.props:', this.props);\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n  }\r\n  componentDidMount() {\r\n    window.componentHandler.upgradeDom();\r\n    setTimeout(function(){\r\n      //this.addClassToRadioSecureInsecure();\r\n    }.bind(this),0);\r\n  }\r\n  addClassToRadioSecureInsecure() {\r\n    const radioSecureInsecure = this.props.restapiEndpointType === \"secure\" ?  document.getElementById(\"radio-secure\").parentElement : document.getElementById(\"radio-insecure\").parentElement;\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Endpoint: addClassToRadioSecureInsecure(): radioSecureInsecure: \",radioSecureInsecure);\r\n    }\r\n    if(radioSecureInsecure){\r\n      radioSecureInsecure.classList.add(\"is-checked\");\r\n      window.componentHandler.upgradeDom();\r\n    }\r\n  }\r\n  render() {\r\n    const restapiEndpointType = this.props.restapiEndpointType;\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Endpoint: render(): restapiEndpointType: \",restapiEndpointType);\r\n    }\r\n    return (\r\n      <p className=\"radio-container\">\r\n        <RadioGroup name=\"radio-secure-insecure\" value={this.props.restapiEndpointType}>\r\n            <Radio \r\n            value=\"secure\" \r\n            ripple \r\n            onClick={this.props.toggleEndpoints.bind(this,\"secure\")}\r\n            >\r\n              Secure, slow endpoint\r\n            </Radio>\r\n            <Radio \r\n            value=\"insecure\" \r\n            ripple \r\n            onClick={this.props.toggleEndpoints.bind(this,\"insecure\")}\r\n            >\r\n              Insecure, fast endpoint<br />\r\n              <span>This may cause UX issues, depending on which device/browser is being used.</span><br />\r\n              <span><strong>codepen.io does not allow connections to insecure resources</strong></span>\r\n            </Radio>\r\n        </RadioGroup>\r\n      </p>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Endpoint;","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Post.js",["90","91"],"import React, { Component } from 'react';\r\nimport { Card, CardText, CardTitle, CardActions, CardMenu, IconButton  } from 'react-mdl';\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    window.componentHandler.upgradeDom();\r\n  }\r\n  render() {\r\n    const display = this.props.id1 === this.props.id2 ? \"block\" : \"none\";\r\n    const defaultStyle1 = {\r\n      display: display\r\n    };\r\n    const defaultStyle2 = {\r\n      padding: \"20px\"\r\n    };\r\n    let optsClassName1 = {};\r\n    optsClassName1['className'] = \"demo-card-wide\";\r\n    let optsClassName2 = {};\r\n    optsClassName2['className'] = \"post\";\r\n    return (\r\n      <Card shadow={0} {...optsClassName1} style={defaultStyle1}>\r\n        <CardTitle {...optsClassName2}>\r\n          <h2 className=\"mdl-card__title-text\">{this.props.title}</h2>\r\n        </CardTitle>\r\n        <CardText>\r\n          {this.props.createdAt}\r\n          <i className=\"fa fa-trash\" onClick={this.props.removeTodo}></i>\r\n        </CardText>\r\n        <CardActions border>\r\n          <div className=\"todo-container\" style={defaultStyle2}>\r\n            {this.props.content}\r\n          </div>\r\n        </CardActions>\r\n        <CardMenu style={{color: '#fff'}}>\r\n          <IconButton name=\"share\" onClick={this.props.openModal.bind(this,\"Share\",\"Click below to share\",\"\",2)} />\r\n        </CardMenu>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\EnableProfanityFilter.js",[],"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\Pagination.js",[],"C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\PageHeader.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"import React, { Component } from 'react';\r\nimport { Spinner, Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\r\nimport { format } from \"date-fns\";\r\nimport { Switch, Route, Link, NavLink } from \"react-router-dom\";\r\n\r\nimport ToDoList from \"./ToDoList\";\r\nimport Posts from \"./Posts\";\r\nimport NotFound from \"./NotFound\";\r\nimport SnackBar from \"./SnackBar\";\r\n\r\nclass PageHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      inputValue: \"\",\r\n      contentValue: \"\",\r\n      movementMatrix: [],\r\n      reorderClicked: false,\r\n      slug: \"\",\r\n      redirect: false,\r\n      postCount: 0,\r\n      postCountPrev: 0,\r\n      addToDo: false,\r\n      pages: 0,\r\n      page: 1,\r\n      dataFetched: false,\r\n      origin: \"\",\r\n      restapiEndpoint: this.props.global_restapiEndpointSecure,\r\n      restapiEndpointType: \"secure\",\r\n      maxpostpage: 1,\r\n      sortmethod: \"Submission_date\",\r\n      sortby: \"DESC\",\r\n      postbatch: 4,\r\n      request_postbatch: 4,\r\n      postbatch_select: [],\r\n      enableprofanityfilter: 0,\r\n      request_profanitylist: [],\r\n      isSnackbarActive: false,\r\n      snackbarTimeout: 5000,\r\n      snackbarMessage: \"\"\r\n    };\r\n    this.createPost = this.createPost.bind(this);\r\n    this.readPost = this.readPost.bind(this);\r\n    this.deletePost = this.deletePost.bind(this);\r\n    this.showProfanitylist = this.showProfanitylist.bind(this);\r\n    this.openModal = this.openModal.bind(this);\r\n    this.createSnackBar = this.createSnackBar.bind(this);\r\n    this.randomIntInc = this.randomIntInc.bind(this);\r\n    this.titleFormat = this.titleFormat.bind(this);\r\n    this.capitalizeFirstLetter = this.capitalizeFirstLetter.bind(this);\r\n    this.createSlug = this.createSlug.bind(this);\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.handleSelectChange = this.handleSelectChange.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleContentChange = this.handleContentChange.bind(this);\r\n    this.count = this.count.bind(this);\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n    this.markTodoDone = this.markTodoDone.bind(this);\r\n    this.toggleEndpoints = this.toggleEndpoints.bind(this);\r\n    this.toggleEnableprofanityfilter = this.toggleEnableprofanityfilter.bind(this);\r\n    this.readPost(this.state.page,\"\",\"\",this.state.sortmethod,this.state.sortby,this.state.postbatch,\"\");\r\n  }\r\n  componentDidUpdate(){\r\n    const mdlLayoutDrawerButton = document.querySelector(\".mdl-layout__drawer-button\");\r\n    if(mdlLayoutDrawerButton){\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: componentDidUpdate(): mdlLayoutDrawerButton exists\");\r\n      }\r\n    }\r\n    else{\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: componentDidUpdate(): mdlLayoutDrawerButton does not exist\");\r\n      }\r\n      const mdlJsLayout = document.querySelectorAll(\".mdl-js-layout\");\r\n      window.componentHandler.downgradeElements(mdlJsLayout);\r\n      try{\r\n        window.componentHandler.register({\r\n          constructor: window.MaterialLayout,\r\n          classAsString: 'MaterialLayout',\r\n          cssClass: 'mdl-js-layout'\r\n        });\r\n      }\r\n      catch(e){\r\n      }\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    //window.componentHandler.upgradeDom();\r\n    this.setState({\r\n      postCountPrev: this.state.postCount\r\n    });\r\n  }\r\n  // CRUD\r\n  // Pages: READ\r\n  readPages(){\r\n    const url = this.state.restapiEndpoint + \"/posts/1\";\r\n    fetch(url,{\r\n      method: 'GET'\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if(this.props.global_consoleDebug){\r\n        console.log('Header: readPages(): Success: data:', data);\r\n      }\r\n      if(data['posts'].length > 0){\r\n        this.setState({\r\n          pages: data['pages'] \r\n        },function(){\r\n          if(this.props.global_consoleDebug){\r\n            console.log('Header: readPages(): this.state.pages:', this.state.pages);\r\n          }\r\n        });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Header: readPages(): Error: data:', error);\r\n    });\r\n  }\r\n  // CRUD\r\n  // Post: CREATE\r\n  createPost(title,content){\r\n    title = (arguments[0] !== null) ? arguments[0] : \"\";\r\n    content = (arguments[1] !== null) ? arguments[1] : \"\";\r\n    const path = \"/post/0\";\r\n    const url = this.state.restapiEndpoint + \"/post/0/\" + this.state.enableprofanityfilter;\r\n    fetch(url,{\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        title: title,\r\n        content: content\r\n      },\r\n    })\r\n    .then(response => {\r\n      if(!response.ok){\r\n        throw response;\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      data['method'] = \"POST\";\r\n      data['path'] = path;\r\n      data['response'] = \"200 OK\";\r\n      const json = JSON.stringify(data,null,2);\r\n      if(data['error'].trim() === \"\"){\r\n        if(this.props.global_consoleDebug){\r\n          console.log('Header: createPost(): Success: data:', data);\r\n        }\r\n      }\r\n      else{\r\n        if(this.props.global_consoleDebug){\r\n          console.log('Header: createPost(): error:', data['error']);\r\n        }\r\n      }\r\n      this.readPost(this.state.page,\"create-post\",json,this.state.sortmethod,this.state.sortby,this.state.postbatch,data['error']);\r\n    })\r\n    .catch((error) => {\r\n      error.text().then( errorMessage => {\r\n        //const error = JSON.parse(errorMessage);\r\n        //const errorText = error['ERROR'];\r\n        const errorText = \"An error occurred on the server. Please try again later...\";\r\n        const data = {};\r\n        data['method'] = \"POST\";\r\n        data['path'] = path;\r\n        data['response'] = \"500\";\r\n        data['error'] = errorText;\r\n        const json = JSON.stringify(data,null,2);\r\n        if(this.props.global_consoleDebug){\r\n          console.log('Header: createPost(): error:', data['error']);\r\n        }\r\n        this.readPost(this.state.page,\"create-post\",json,this.state.sortmethod,this.state.sortby,this.state.postbatch,data['error']);\r\n      });\r\n    });\r\n  }\r\n  // Post: READ\r\n  readPost(page,origin,json,sortmethod,sortby,postbatch,error){\r\n    page = (arguments[0] !== null) ? arguments[0] : 1;\r\n    origin = (arguments[1] !== null) ? arguments[1] : \"\";\r\n    json = (arguments[2] !== null) ? arguments[2] : \"\";\r\n    sortmethod = (arguments[3] !== null) ? arguments[3] : this.state.sortmethod;\r\n    sortby = (arguments[4] !== null) ? arguments[4] : this.state.sortby;\r\n    postbatch = (arguments[5] !== null) ? arguments[5] : this.state.postbatch;\r\n    error = (arguments[6] !== null) ? arguments[6] : \"\";\r\n    if(this.props.global_consoleDebug){\r\n      console.log('Header: readPost(): postbatch:', postbatch);\r\n    }\r\n    if(origin !== \"\"){\r\n      this.setState({\r\n        dataFetched: false\r\n      });\r\n    }\r\n    const url = this.state.restapiEndpoint + \"/posts/\" + page + \"/\" + sortmethod + \"/\" + sortby + \"/\" + postbatch;\r\n    fetch(url,{\r\n      method: 'GET'\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      if(this.props.global_consoleDebug){\r\n        console.log('Header: readPost(): Success: data:', data);\r\n      }\r\n      let posts = [];\r\n      if(data['posts'].length > 0){\r\n        for (var i = 0; i < data['posts'].length; i++) {\r\n          const id = parseInt(i + 1);\r\n          const obj1 = data['posts'][i];\r\n          const title = this.titleFormat(obj1['title']);\r\n          const slug = this.createSlug(title,id);\r\n          const content = this.capitalizeFirstLetter(obj1['content']);\r\n          const createdAt = obj1['createdAt'];\r\n          const obj2 = {\r\n            id: id,\r\n            slug: slug,\r\n            title: title,\r\n            content: content,\r\n            done: true,\r\n            createdAt: createdAt,\r\n            postid: obj1['postid']\r\n          }\t\r\n          posts.push(obj2);\t  \r\n        } \r\n        this.count(data['recordcount']);\r\n        this.setState({\r\n          posts: posts,\r\n          pages: data['pages'],\r\n          page: page,\r\n          dataFetched: true,\r\n          maxpostpage: data['maxpostpage'],\r\n          sortmethod: sortmethod,\r\n          sortby: sortby,\r\n          postbatch: postbatch,\r\n          request_postbatch: data['request_postbatch'], \r\n          postbatch_select: data['postbatch_select'],\r\n          request_profanitylist: data['request_profanitylist'],\r\n          isSnackbarActive: error ? (error !== \"\" ? true : false) : false,\r\n          snackbarTimeout: this.state.snackbarTimeout,\r\n          snackbarMessage: error ? (error !== \"\" ? error : \"\") : false\r\n        },function(){\r\n          //if(this.props.global_consoleDebug){\r\n            console.log('Header: readPost(): this.state:', this.state);\r\n          //}\r\n          this.toggleEndpoints(this.state.restapiEndpointType);\r\n        });\r\n        if(json !== \"\"){\r\n          const restapiContainerTextInner = document.getElementById(\"restapi-container-text-inner\");\r\n          if(restapiContainerTextInner){\r\n            restapiContainerTextInner.innerText = json;\r\n            const restapiContainerText = document.getElementById(\"restapi-container-text\");\r\n            if(restapiContainerText){\r\n              if(error.trim() === \"\"){\r\n                restapiContainerText.style.background = \"rgba(0,0,0,0.0125)\";\r\n              }\r\n              else{\r\n                restapiContainerText.style.background = \"#fef6f5\";\r\n              }\r\n            }\r\n            const restapiContainerTextSubtitleSpan = document.getElementById(\"restapi-container-text-subtitle-span\");\r\n            if(restapiContainerTextSubtitleSpan){\r\n              if(error.trim() === \"\"){\r\n                restapiContainerTextSubtitleSpan.innerText = \"No errors detected\";\r\n              }\r\n              else{\r\n                restapiContainerTextSubtitleSpan.innerText = \"Errors detected\";\r\n              }\r\n              const id = \"restapi-container-text-subtitle-icon\";\r\n              let restapiContainerTextSubtitleIcon = document.getElementById(id);\r\n              if(restapiContainerTextSubtitleIcon){\r\n                restapiContainerTextSubtitleIcon.classList.remove(\"information\",\"error\",\"fa-check-circle\",\"fa-ban\");\r\n                if(error.trim() === \"\"){\r\n                  restapiContainerTextSubtitleIcon.classList.add(\"fa-check-circle\",\"information\");\r\n                }\r\n                else{\r\n                  restapiContainerTextSubtitleIcon.classList.add(\"fa-ban\",\"error\");\r\n                }\r\n              }\r\n            }\r\n            if(this.props.global_consoleDebug){\r\n              console.log('Header: readPost(): Success: json:', json);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Header: readPost(): Error: data:', error);\r\n    });\r\n  }\r\n  // Post: DELETE\r\n  deletePost(postid){\r\n    var postid = (arguments[0] !== null) ? arguments[0] : 0;\r\n    const path = \"/post/\" + postid;\r\n    const url = this.state.restapiEndpoint + \"/post/\" + postid + \"/0\";\r\n    fetch(url,{\r\n      method: 'POST', // or 'PUT'\r\n      headers: {\r\n        'X-HTTP-METHOD-OVERRIDE': 'DELETE'\r\n      },\r\n    })\r\n    .then(response => {\r\n      if(!response.ok){\r\n        throw response;\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      data['method'] = \"DELETE\";\r\n      data['path'] = path;\r\n      data['response'] = \"200 OK\";\r\n      const json = JSON.stringify(data,null,2);\r\n      if(this.props.global_consoleDebug){\r\n        console.log('Header: deletePost(): Success: data:', data);\r\n      }\r\n      this.readPost(this.state.page,\"delete-post\",json,this.state.sortmethod,this.state.sortby,this.state.postbatch,\"\");\r\n    })\r\n    .catch((error) => {\r\n      error.text().then( errorMessage => {\r\n        const error = JSON.parse(errorMessage);\r\n        //const errorText = error['ERROR'];\r\n        const errorText = \"An error occurred on the server. Please try again later...\";\r\n        const data = {};\r\n        data['method'] = \"DELETE\";\r\n        data['path'] = path;\r\n        data['response'] = \"500\";\r\n        data['error'] = errorText;\r\n        const json = JSON.stringify(data,null,2);\r\n        if(this.props.global_consoleDebug){\r\n          console.log('Header: deletePost(): error:', data['error']);\r\n        }\r\n        this.readPost(this.state.page,\"delete-post\",json,this.state.sortmethod,this.state.sortby,this.state.postbatch,data['error']);\r\n      });\r\n    });\r\n  }\r\n  // UDF Methods\r\n  showProfanitylist(){\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: showProfanitylist()\");\r\n    }\r\n    const profanityList = document.querySelector(\".profanity-list\");\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: showProfanitylist(): profanityList: \",profanityList);\r\n    }\r\n    if(profanityList){\r\n      const display = profanityList.style.display;\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: showProfanitylist(): display: \",display);\r\n      }\r\n      if(display.trim() === \"none\"){\r\n        profanityList.style.display = \"block\";\r\n      }\r\n      else{\r\n        profanityList.style.display = \"none\";\r\n      }\r\n    }\r\n  }\r\n  openModal(title,message,buttonTitle,callback) {\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: openModal(): callback: \",callback);\r\n    }\r\n    const id = \"dialog-modal\";\r\n    let dialogContainer = document.getElementById(id);\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: openModal(): dialogContainer: \",dialogContainer);\r\n    }\r\n    if(!dialogContainer){\r\n      const dialog = document.createElement(\"dialog\");\r\n      dialog.setAttribute(\"id\",id);\r\n      dialog.classList.add(\"mdl-dialog\");\r\n      const h3 = document.createElement(\"h3\");\r\n      h3.classList.add(\"mdl-dialog__title\");\r\n      const h3Textnode = document.createTextNode(title);\r\n      const div1 = document.createElement(\"div\");\r\n      if(callback === 1){\r\n        div1.classList.add(\"mdl-dialog__content\",\"callback-1\");\r\n      }\r\n      if(callback === 2){\r\n        div1.classList.add(\"mdl-dialog__content\",\"callback-2\");\r\n      }\r\n      const p = document.createElement(\"p\");\r\n      const pTextnode = document.createTextNode(message);\r\n      const select1 = document.createElement(\"select\");\r\n      select1.classList.add(\"profanity-list\");\r\n      select1.setAttribute(\"style\",\"display:none;\");\r\n      for (var i = 0; i < this.state.request_profanitylist.length; i++) {\r\n        const idx = this.state.request_profanitylist[i];\r\n        const option = document.createElement(\"option\");\r\n        option.setAttribute(\"value\",idx);\r\n        const optionTextnode = document.createTextNode(idx);\r\n        option.appendChild(optionTextnode);\r\n        select1.appendChild(option);\r\n      } \r\n      const div2 = document.createElement(\"div\");\r\n      div2.classList.add(\"mdl-dialog__actions\",\"--full-width\");\r\n      const button1 = document.createElement(\"button\");\r\n      button1.classList.add(\"mdl-button\",\"close\");\r\n      const button1Textnode = document.createTextNode(\"Close\");\r\n      const button2 = document.createElement(\"button\");\r\n      button2.classList.add(\"mdl-button\",\"callback\");\r\n      const button2Textnode = document.createTextNode(buttonTitle);\r\n      h3.appendChild(h3Textnode);\r\n      p.appendChild(pTextnode);\r\n      div1.appendChild(p);\r\n      div1.appendChild(select1);\r\n      if(callback === 2){\r\n        const divShare = document.createElement(\"div\");\r\n        const aTwitter = document.createElement(\"a\");\r\n        const aTwitterText = encodeURIComponent(\"React ES6 REST API\");\r\n        const aTwitterUrl = encodeURIComponent(\"https://community.establishmindfulness.com/assets-react_es6_restapi/index.html\");\r\n        aTwitter.setAttribute(\"href\",\"https://twitter.com/intent/tweet?text=\" + aTwitterText + \"&url=\" + aTwitterUrl + \"\");\r\n        aTwitter.setAttribute(\"target\",\"_blank\");\r\n        const spanTwitter = document.createElement(\"span\");\r\n        const iTwitter = document.createElement(\"i\");\r\n        iTwitter.classList.add(\"fa\",\"fa-twitter\");\r\n        divShare.appendChild(aTwitter);\r\n        aTwitter.appendChild(spanTwitter);\r\n        spanTwitter.appendChild(iTwitter);\r\n        const aFacebook = document.createElement(\"a\");\r\n        const aFacebookUrl = encodeURIComponent(\"https://community.establishmindfulness.com/assets-react_es6_restapi/index.html\");\r\n        aFacebook.setAttribute(\"href\",\"https://www.facebook.com/sharer/sharer.php?u=\" + aFacebookUrl + \"\");\r\n        aFacebook.setAttribute(\"target\",\"_blank\");\r\n        const spanFacebook = document.createElement(\"span\");\r\n        const iFacebook = document.createElement(\"i\");\r\n        iFacebook.classList.add(\"fa\",\"fa-facebook\");\r\n        divShare.appendChild(aFacebook);\r\n        aFacebook.appendChild(spanFacebook);\r\n        spanFacebook.appendChild(iFacebook);\r\n        const aTumblr = document.createElement(\"a\");\r\n        const aTumblrText = encodeURIComponent(\"React ES6 REST API\");\r\n        const aTumblrUrl = encodeURIComponent(\"https://community.establishmindfulness.com/assets-react_es6_restapi/index.html\");\r\n        aTumblr.setAttribute(\"href\",\"https://www.tumblr.com/share/link?name=\" + aTumblrText + \"&url=\" + aTumblrUrl + \"\");\r\n        aTumblr.setAttribute(\"target\",\"_blank\");\r\n        const spanTumblr = document.createElement(\"span\");\r\n        const iTumblr = document.createElement(\"i\");\r\n        iTumblr.classList.add(\"fa\",\"fa-tumblr\");\r\n        divShare.appendChild(aTumblr);\r\n        aTumblr.appendChild(spanTumblr);\r\n        spanTumblr.appendChild(iTumblr);\r\n        const aLinkedin = document.createElement(\"a\");\r\n        const aLinkedinText = encodeURIComponent(\"React ES6 REST API\");\r\n        const aLinkedinUrl = encodeURIComponent(\"https://community.establishmindfulness.com/assets-react_es6_restapi/index.html\");\r\n        aLinkedin.setAttribute(\"href\",\"https://www.linkedin.com/shareArticle?mini=true&title=\" + aLinkedinText + \"&url=\" + aLinkedinUrl + \"\");\r\n        aLinkedin.setAttribute(\"target\",\"_blank\");\r\n        const spanLinkedin = document.createElement(\"span\");\r\n        const iLinkedin = document.createElement(\"i\");\r\n        iLinkedin.classList.add(\"fa\",\"fa-linkedin\");\r\n        divShare.appendChild(aLinkedin);\r\n        aLinkedin.appendChild(spanLinkedin);\r\n        spanLinkedin.appendChild(iLinkedin);\r\n        div1.appendChild(divShare);\r\n      }\r\n      button1.appendChild(button1Textnode);\r\n      div2.appendChild(button1);\r\n      button2.appendChild(button2Textnode);\r\n      div2.appendChild(button2);\r\n      dialog.appendChild(h3);\r\n      dialog.appendChild(div1);\r\n      dialog.appendChild(div2);\r\n      document.body.appendChild(dialog);\r\n      if(buttonTitle.trim() === \"\"){\r\n        button2.style.display = \"none\";\r\n      } \r\n      window.componentHandler.upgradeDom();\r\n      dialogContainer = document.getElementById(id);\r\n    }\r\n    if(dialogContainer){\r\n      if(!dialogContainer.showModal){\r\n        window.dialogPolyfill.registerDialog(dialogContainer);\r\n      }\r\n      dialogContainer.showModal();\r\n      dialogContainer.querySelector('button.callback')\r\n      .addEventListener('click', function() {\r\n        if(callback === 1){\r\n          this.showProfanitylist();\r\n        }\r\n      }.bind(this));\r\n      dialogContainer.querySelector('button.close')\r\n      .addEventListener('click', function() {\r\n        dialogContainer.close();\r\n        dialogContainer = document.getElementById(id);\r\n        if(dialogContainer){\r\n          dialogContainer.remove();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  createSnackBar(message,type) {\r\n    var message = (arguments[0] !== null) ? arguments[0] : \"\";\r\n    var type = (arguments[1] !== null) ? arguments[1] : \"\";\r\n    const id = \"snackbar-message\";\r\n    let snackbarContainer = document.getElementById(id);\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: createSnackBar(): snackbarContainer: \",snackbarContainer);\r\n    }\r\n    if(!snackbarContainer){\r\n      const div1 = document.createElement(\"div\");\r\n      div1.setAttribute(\"id\",id);\r\n      div1.classList.add(\"mdl-js-snackbar\",\"mdl-snackbar\");\r\n      const div2 = document.createElement(\"div\");\r\n      div2.classList.add(\"mdl-snackbar__text\");\r\n      const button = document.createElement(\"button\");\r\n      button.classList.add(\"mdl-snackbar__action\");\r\n      div1.appendChild(div2);\r\n      div1.appendChild(button);\r\n      document.body.appendChild(div1);\r\n      window.componentHandler.upgradeDom();\r\n      snackbarContainer = document.getElementById(id);\r\n    }\r\n    if(snackbarContainer){\r\n      setTimeout(function(){\r\n        if(snackbarContainer){\r\n          var data = {\r\n            message:message,\r\n            timeout:5000,\r\n            actionHandler:function(event){\r\n              snackbarContainer.classList.remove(\"mdl-snackbar--active\")\r\n            },\r\n            actionText:'Close'\r\n          };\r\n          try{\r\n            if(this.props.global_consoleDebug){\r\n              console.log(\"Header: createSnackBar(): snackbarContainer.MaterialSnackbar: \",snackbarContainer.MaterialSnackbar);\r\n            }\r\n            snackbarContainer.MaterialSnackbar.showSnackbar(data);\r\n          }\r\n          catch(e){\r\n          }\r\n        }\r\n      },1000);\r\n    }\r\n  }\r\n  randomIntInc(low, high) {\r\n    return Math.floor(Math.random() * (high - low + 1) + low);\r\n  }\r\n  titleFormat(string){\r\n    const words = string.split(\" \");\r\n    for (let i = 0; i < words.length; i++) {\r\n      words[i] = words[i][0].toUpperCase() + words[i].substr(1);\r\n    }\r\n    return words.join(\" \");\r\n  }\r\n  capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n  createSlug(slug,id) {\r\n    var slug = (arguments[0] !== null) ? arguments[0] : \"\";\r\n    var id = (arguments[1] !== null) ? arguments[1] : parseInt(this.state.posts.length + 1);\r\n    let value = \"\";\r\n    const punctuationPattern = /[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/gim;\r\n    value = slug.replace(punctuationPattern, \"\");\r\n    value = value.trim();\r\n    value = value.replace(/[\\s]+/gim, \"-\");\r\n    value = value.toLowerCase();\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: createSlug(): value: \", value);\r\n    }\r\n    value = value + \"-\" + id;\r\n    return value;\r\n  }\r\n  addTodo() {\r\n    const todos = this.state.posts;\r\n    if (this.state.inputValue.trim() !== \"\") {\r\n      const inputValue = this.state.inputValue;\r\n      const contentValue = this.state.contentValue;\r\n      const slug = this.createSlug(inputValue);\r\n      const content = this.capitalizeFirstLetter(contentValue);\r\n      const createdAt = format(new Date(), \"yyyy-mm-dd hh:mm:ss\");\r\n      todos.push({\r\n        title: inputValue,\r\n        done: false,\r\n        slug: slug,\r\n        content: content,\r\n        createdAt: createdAt,\r\n        postid: 0\r\n      });\r\n      this.setState({\r\n        posts: todos,\r\n        inputValue: \"\",\r\n        contentValue: \"\",\r\n        addToDo: true\r\n      });\r\n      const title = this.titleFormat(inputValue);\r\n      this.createPost(title,content);\r\n    }\r\n  }\r\n  handleSelectChange(page,origin,json,sortmethod,sortby,event) {\r\n    var page = (arguments[0] !== null) ? arguments[0] : 1;\r\n    var origin = (arguments[1] !== null) ? arguments[1] : \"\";\r\n    var json = (arguments[2] !== null) ? arguments[2] : \"\";\r\n    var sortmethod = (arguments[3] !== null) ? arguments[3] : this.state.sortmethod;\r\n    var sortby = (arguments[4] !== null) ? arguments[4] : this.state.sortby;\r\n    if(this.props.global_consoleDebug){\r\n      console.log('Header: handleSelectChange():  page: ',page,' origin: ',origin,' json: ',json,' sortmethod: ',sortmethod,' sortby: ',sortby,' postbatch: ',event.target.value);\r\n    }\r\n    this.readPost(page,origin,json,sortmethod,sortby,event.target.value,\"\");\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      dataFetched: false  \r\n    });\r\n    this.setState({\r\n      inputValue: e.target.value,\r\n      dataFetched: true \r\n    },function(){\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: handleChange(): this.state.inputValue: \",this.state.inputValue);\r\n      }\r\n    });\r\n  }\r\n  handleContentChange(e) {\r\n    this.setState({\r\n      dataFetched: false  \r\n    });\r\n    this.setState({\r\n      contentValue: e.target.value,\r\n      dataFetched: true \r\n    },function(){\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: handleContentChange(): this.state.contentValue: \",this.state.contentValue);\r\n      }\r\n    });\r\n  }\r\n  count(n) {\r\n    this.setState({\r\n      postCountPrev: this.state.postCount,\r\n      postCount: n\r\n    });\t\t\r\n  }\r\n  removeTodo(index,origin,postid) {\r\n    var index = (arguments[0] !== null) ? arguments[0] : 0;\r\n    var origin = (arguments[1] !== null) ? arguments[1] : \"\";\r\n    var postid = (arguments[2] !== null) ? arguments[2] : 0;\r\n    if(this.props.global_consoleDebug){\r\n      console.log(\"Header: removeTodo(): index: \",index,\" origin: \",origin,\" postid: \",postid);\r\n    }\r\n    this.state.posts.splice(index, 1);\r\n    this.setState({\r\n      posts: this.state.posts\r\n    });\r\n    if(postid > 0){\r\n      this.deletePost(postid);\r\n    }\r\n    if(origin === \"post\"){\r\n      this.setState({\r\n        redirect: true\r\n      });\r\n    }\r\n  }\r\n  markTodoDone(index) {\r\n    const todos = this.state.posts;\r\n    const todo = this.state.posts[index];\r\n    todos.splice(index, 1);\r\n    todo.done = !todo.done;\r\n    todo.done ? todos.push(todo) : todos.unshift(todo);\r\n    this.setState({\r\n      posts: todos\r\n    });\r\n  }\r\n  toggleEndpoints(type) {\r\n    this.setState({\r\n      restapiEndpoint: type === \"secure\" ? this.props.global_restapiEndpointSecure : this.props.global_restapiEndpointInsecure,\r\n      restapiEndpointType: type \r\n    },function(){\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: toggleEndpoints(): this.state.restapiEndpoint: \",this.state.restapiEndpoint,\" this.state.restapiEndpointType: \",this.state.restapiEndpointType);\r\n      }\r\n    });\r\n  }\r\n  toggleEnableprofanityfilter(type) {\r\n    this.setState({\r\n      enableprofanityfilter: type \r\n    },function(){\r\n      if(this.props.global_consoleDebug){\r\n        console.log(\"Header: toggleEnableprofanityfilter(): this.state.enableprofanityfilter: \",this.state.enableprofanityfilter);\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    var posts = this.state.posts.map(\r\n      function (post, index) {\r\n        const link = \"/post/\" + post.slug;\r\n        return (\r\n          <NavLink className=\"mdl-navigation__link\" to={link} key={post.postid}>\r\n            {post.title}\r\n          </NavLink>\r\n        );\r\n      }.bind(this)\r\n    );\r\n    //this.state.dataFetched = false;\r\n    const headerLink = (<Link to=\"/\"><i className=\"fa fa-home home\"></i></Link>);\r\n    const headerA = (<a className=\"bitbucket-link\" href=\"https://bitbucket.org/charlesrobertson/react-router-es6/src/master/\" target=\"_blank\"><i className=\"fa fa-github\"></i></a>);\r\n    const headerSpan = (<span className=\"mdl-layout-title\">Postman REST API</span>);\r\n    return (\r\n    this.state.dataFetched === true ? (\r\n      <Layout fixedHeader>\r\n        <Header title={headerSpan}>\r\n        {headerLink}\r\n        {headerA}\r\n        </Header>\r\n        <Drawer title=\"Postman REST API\">\r\n          <Navigation className=\"mdl-navigation\">\r\n            <NavLink className=\"mdl-navigation__link\" to=\"/\">\r\n              Home\r\n            </NavLink>\r\n            {posts}\r\n          </Navigation>\r\n        </Drawer>\r\n        <Content>\r\n          <div className=\"page-content\">\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path=\"/\"\r\n                render={() => { \r\n                  if(this.props.global_consoleDebug){\r\n                    console.log(\"Header: render 2: this.state \", this.state);\r\n                  }\r\n                  return (\r\n                      <Posts posts={this.state.posts} removeTodo={this.removeTodo} markTodoDone={this.markTodoDone} addTodo={this.addTodo} readPost={this.readPost} pages={this.state.pages} postCount={this.state.postCount} handleChange={this.handleChange} handleContentChange={this.handleContentChange} inputValue={this.state.inputValue} contentValue={this.state.contentValue} postCountPrev={this.state.postCountPrev} toggleEndpoints={this.toggleEndpoints} restapiEndpointType={this.state.restapiEndpointType} page={this.state.page} maxpostpage={this.state.maxpostpage} sortmethod={this.state.sortmethod} sortby={this.state.sortby} postbatch={this.state.postbatch} request_postbatch={this.state.request_postbatch} postbatch_select={this.state.postbatch_select} handleSelectChange={this.handleSelectChange} enableprofanityfilter={this.state.enableprofanityfilter} toggleEnableprofanityfilter={this.toggleEnableprofanityfilter} openModal={this.openModal} showProfanitylist={this.showProfanitylist} global_height={this.props.global_height} global_consoleDebug={this.props.global_consoleDebug} global_enableProfanityFilter={this.props.global_enableProfanityFilter} global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} />\r\n                    );\r\n                  }\r\n                }\r\n              />\r\n              <Route\r\n                path=\"/post/:postSlug\"\r\n                render={(props) => {\r\n                  if(this.props.global_consoleDebug){\r\n                    console.log(\"Header: render: props \", props);\r\n                    console.log(\"Header: render: props.location.state \", props.location.state);\r\n                    console.log(\"Header: render: this.state.posts \", this.state.posts);\r\n                  }\r\n                  const post = this.state.posts.find(\r\n                    (post) => post.slug === props.match.params.postSlug\r\n                  );\r\n                  if (post) {\r\n                    return (\r\n                      <ToDoList origin=\"post\" posts={this.state.posts} id={post.id} removeTodo={this.removeTodo} markTodoDone={this.markTodoDone} addTodo={this.addTodo} readPost={this.readPost} pages={this.state.pages} postCount={this.state.postCount} handleChange={this.handleChange} handleContentChange={this.handleContentChange} inputValue={this.state.inputValue} contentValue={this.state.contentValue} postCountPrev={this.state.postCountPrev} toggleEndpoints={this.toggleEndpoints} restapiEndpointType={this.state.restapiEndpointType} page={this.state.page} maxpostpage={this.state.maxpostpage} sortmethod={this.state.sortmethod} sortby={this.state.sortby} postbatch={this.state.postbatch} request_postbatch={this.state.request_postbatch} postbatch_select={this.state.postbatch_select} handleSelectChange={this.handleSelectChange} enableprofanityfilter={this.state.enableprofanityfilter} toggleEnableprofanityfilter={this.toggleEnableprofanityfilter} openModal={this.openModal} showProfanitylist={this.showProfanitylist} global_height={this.props.global_height} global_consoleDebug={this.props.global_consoleDebug} global_enableProfanityFilter={this.props.global_enableProfanityFilter} global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} />\r\n                    );\r\n                  }\r\n                  else { \r\n                    return (\r\n                      <NotFound global_height={this.props.global_height} global_consoleDebug={this.props.global_consoleDebug} global_enableProfanityFilter={this.props.global_enableProfanityFilter} global_restapiEndpointInsecure={this.props.global_restapiEndpointInsecure} global_restapiEndpointSecure={this.props.global_restapiEndpointSecure} />\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n              />\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </div>\r\n        </Content>\r\n        <SnackBar isSnackbarActive={this.state.isSnackbarActive} snackbarTimeout={this.state.snackbarTimeout} snackbarMessage={this.state.snackbarMessage} global_consoleDebug={this.props.global_consoleDebug} />\r\n      </Layout>\r\n      )\r\n      :\r\n      (\r\n      <div className=\"spinner-container-outer\">\r\n        <div className=\"spinner-container-fetch\">\r\n          <div className=\"spinner-container-inner\">\r\n            <Spinner singleColor />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageHeader;","C:\\ColdFusion2018\\cfusion\\wwwroot\\react\\npm-react-router-es6-git\\src\\components\\SnackBar.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":2,"column":21,"nodeType":"117","messageId":"118","endLine":2,"endColumn":27},{"ruleId":"115","severity":1,"message":"119","line":3,"column":10,"nodeType":"117","messageId":"118","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"120","line":5,"column":20,"nodeType":"117","messageId":"118","endLine":5,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":40,"column":52,"nodeType":"123","messageId":"124","endLine":40,"endColumn":54},{"ruleId":"115","severity":1,"message":"125","line":135,"column":13,"nodeType":"117","messageId":"118","endLine":135,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":142,"column":9,"nodeType":"128","messageId":"129","endLine":142,"endColumn":13,"fix":"130"},{"ruleId":"115","severity":1,"message":"125","line":154,"column":13,"nodeType":"117","messageId":"118","endLine":154,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":161,"column":9,"nodeType":"128","messageId":"129","endLine":161,"endColumn":13,"fix":"131"},{"ruleId":"115","severity":1,"message":"125","line":174,"column":13,"nodeType":"117","messageId":"118","endLine":174,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":181,"column":9,"nodeType":"128","messageId":"129","endLine":181,"endColumn":13,"fix":"132"},{"ruleId":"115","severity":1,"message":"133","line":202,"column":11,"nodeType":"117","messageId":"118","endLine":202,"endColumn":12},{"ruleId":"115","severity":1,"message":"134","line":251,"column":11,"nodeType":"117","messageId":"118","endLine":251,"endColumn":22},{"ruleId":"115","severity":1,"message":"135","line":270,"column":7,"nodeType":"117","messageId":"118","endLine":270,"endColumn":11},{"ruleId":"115","severity":1,"message":"136","line":271,"column":7,"nodeType":"117","messageId":"118","endLine":271,"endColumn":17},{"ruleId":"115","severity":1,"message":"137","line":272,"column":7,"nodeType":"117","messageId":"118","endLine":272,"endColumn":14},{"ruleId":"115","severity":1,"message":"138","line":288,"column":7,"nodeType":"117","messageId":"118","endLine":288,"endColumn":11},{"ruleId":"115","severity":1,"message":"139","line":289,"column":7,"nodeType":"117","messageId":"118","endLine":289,"endColumn":14},{"ruleId":"126","severity":1,"message":"127","line":421,"column":9,"nodeType":"128","messageId":"129","endLine":421,"endColumn":13,"fix":"140"},{"ruleId":"141","severity":1,"message":"142","line":550,"column":13,"nodeType":"143","endLine":550,"endColumn":132},{"ruleId":"115","severity":1,"message":"120","line":4,"column":20,"nodeType":"117","messageId":"118","endLine":4,"endColumn":26},{"ruleId":"115","severity":1,"message":"144","line":5,"column":3,"nodeType":"117","messageId":"118","endLine":5,"endColumn":9},{"ruleId":"115","severity":1,"message":"145","line":6,"column":3,"nodeType":"117","messageId":"118","endLine":6,"endColumn":8},{"ruleId":"115","severity":1,"message":"146","line":8,"column":3,"nodeType":"117","messageId":"118","endLine":8,"endColumn":7},{"ruleId":"115","severity":1,"message":"147","line":9,"column":3,"nodeType":"117","messageId":"118","endLine":9,"endColumn":10},{"ruleId":"148","severity":1,"message":"149","line":13,"column":3,"nodeType":"150","messageId":"151","endLine":15,"endColumn":4},{"ruleId":"115","severity":1,"message":"120","line":5,"column":20,"nodeType":"117","messageId":"118","endLine":5,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":17,"column":7,"nodeType":"128","messageId":"129","endLine":17,"endColumn":11,"fix":"152"},{"ruleId":"148","severity":1,"message":"149","line":5,"column":3,"nodeType":"150","messageId":"151","endLine":7,"endColumn":4},{"ruleId":"153","severity":1,"message":"154","line":12,"column":36,"nodeType":"155","messageId":"129","endLine":12,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":294,"column":9,"nodeType":"117","messageId":"158","endLine":294,"endColumn":15},{"ruleId":"115","severity":1,"message":"159","line":321,"column":15,"nodeType":"117","messageId":"118","endLine":321,"endColumn":20},{"ruleId":"156","severity":1,"message":"160","line":490,"column":9,"nodeType":"117","messageId":"158","endLine":490,"endColumn":16},{"ruleId":"156","severity":1,"message":"161","line":491,"column":9,"nodeType":"117","messageId":"158","endLine":491,"endColumn":13},{"ruleId":"156","severity":1,"message":"162","line":548,"column":9,"nodeType":"117","messageId":"158","endLine":548,"endColumn":13},{"ruleId":"156","severity":1,"message":"163","line":549,"column":9,"nodeType":"117","messageId":"158","endLine":549,"endColumn":11},{"ruleId":"164","severity":1,"message":"165","line":551,"column":36,"nodeType":"166","messageId":"167","endLine":551,"endColumn":37,"suggestions":"168"},{"ruleId":"164","severity":1,"message":"169","line":551,"column":42,"nodeType":"166","messageId":"167","endLine":551,"endColumn":43,"suggestions":"170"},{"ruleId":"164","severity":1,"message":"171","line":551,"column":45,"nodeType":"166","messageId":"167","endLine":551,"endColumn":46,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"173","line":589,"column":9,"nodeType":"117","messageId":"158","endLine":589,"endColumn":13},{"ruleId":"156","severity":1,"message":"174","line":590,"column":9,"nodeType":"117","messageId":"158","endLine":590,"endColumn":15},{"ruleId":"156","severity":1,"message":"175","line":591,"column":9,"nodeType":"117","messageId":"158","endLine":591,"endColumn":13},{"ruleId":"156","severity":1,"message":"176","line":592,"column":9,"nodeType":"117","messageId":"158","endLine":592,"endColumn":19},{"ruleId":"156","severity":1,"message":"177","line":593,"column":9,"nodeType":"117","messageId":"158","endLine":593,"endColumn":15},{"ruleId":"156","severity":1,"message":"178","line":632,"column":9,"nodeType":"117","messageId":"158","endLine":632,"endColumn":14},{"ruleId":"156","severity":1,"message":"174","line":633,"column":9,"nodeType":"117","messageId":"158","endLine":633,"endColumn":15},{"ruleId":"156","severity":1,"message":"157","line":634,"column":9,"nodeType":"117","messageId":"158","endLine":634,"endColumn":15},{"ruleId":"126","severity":1,"message":"127","line":689,"column":9,"nodeType":"128","messageId":"129","endLine":689,"endColumn":13,"fix":"179"},{"ruleId":"180","severity":1,"message":"181","line":693,"column":22,"nodeType":"143","endLine":693,"endColumn":143},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'CSSPlugin' is defined but never used.","'Router' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'temp' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"184","text":"185"},{"range":"186","text":"185"},{"range":"187","text":"185"},"'y' is assigned a value but never used.","'todosLength' is assigned a value but never used.","'top1' is assigned a value but never used.","'direction2' is assigned a value but never used.","'index_1' is assigned a value but never used.","'top2' is assigned a value but never used.","'index_2' is assigned a value but never used.",{"range":"188","text":"185"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'NavLink' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",{"range":"189","text":"185"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-redeclare","'postid' is already defined.","redeclared","'error' is assigned a value but never used.","'message' is already defined.","'type' is already defined.","'slug' is already defined.","'id' is already defined.","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["190","191"],"Unnecessary escape character: \\^.",["192","193"],"Unnecessary escape character: \\*.",["194","195"],"'page' is already defined.","'origin' is already defined.","'json' is already defined.","'sortmethod' is already defined.","'sortby' is already defined.","'index' is already defined.",{"range":"196","text":"185"},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",[4659,4670],"",[5174,5185],[5738,5749],[16800,16811],[476,487],{"messageId":"197","fix":"198","desc":"199"},{"messageId":"200","fix":"201","desc":"202"},{"messageId":"197","fix":"203","desc":"199"},{"messageId":"200","fix":"204","desc":"202"},{"messageId":"197","fix":"205","desc":"199"},{"messageId":"200","fix":"206","desc":"202"},[26508,26519],"removeEscape",{"range":"207","text":"185"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"208","text":"209"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"210","text":"185"},{"range":"211","text":"209"},{"range":"212","text":"185"},{"range":"213","text":"209"},[21836,21837],[21836,21836],"\\",[21842,21843],[21842,21842],[21845,21846],[21845,21845]]